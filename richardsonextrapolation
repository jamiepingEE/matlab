clc;
clear;
%approx integral e^-x^2 [0, 1], accuracy: by default matlab uses 16 digits
%of precision
digits(16)
%specify or initialize n as real even integer
order=376; %order or level of integration
 
%SIMPSON'S INTEGRALS DEPENDS ON THESE INITIALIZATION VALUES DO NOT CUT OUT
        for subdivisions=1:1:order %will be used as iteration index
            
            inputn=2*subdivisions; %subintervals or 2*subdivisions
            n=inputn+1; %shift n by +1
            
            %assign interval of integration a and b
            a=0;%beginning of integral
            b=1;%end of integral
            
            %initialize summations for composite simpson's 1/3 formula
            sumeven=0;%if even index >1 doesn't exist
            sumodd=0;%if odd index >1 doesn't exist
            % COMPOSITE SIMPSON'S 1/3  LOOP BEGINS HERE
            for i=1:1:n %i = is:increment by step of:up e.g: array of 3
                format long %use 16 digits
                x(i)=a+(i-1)*(b-a)/inputn; %(b-a) /n for composite
                f(i)=exp(-(x(i))^2);
                %oddfinder f(1) is omitted but f(n) must be omitted
                %oddfinder searches for even indices since we can't have index 0
                if i<(n) && mod(i,2)==0
                    sumodd=sumodd+f(i);
                end
                %evenfinder f(1) and f(n) must be omitted
                if i>1 && i<(n) && ~(mod(i,2)==0)
                    sumeven=sumeven+f(i);
                end
            end
            %COMPOSITE SIMPSON'S 1/3 BEGINS HERE
            %LOOP IS PROOFED - DO NOT CHANGE
            
            %approx integral: evaluate Simpson's 1/3 integral
            h=(b-a)/inputn; %(b-a) /n for composite h=(a+b)/2 for noncomposite
            
            %BEGIN PRODUCING INTEGRAL APPROXIMATIONS at k=2
            %%shift I down 1 row position due to k=2
            %each row in column 2 is increase in segments by 2n
            I(subdivisions+1,2)=(h/3)*( f(1)+4*sumodd+2*sumeven+f(n) );%store only in second column
            %k=1 will be an empty array for proper algorithm
        end
        % once second column of array, or I(subdivisions,2), is loaded with
        % integrals, begin approximating higher order integrals
        
        %DOUBLE CHECK INTEGRATION LEVEL BEGINNING SHOULD BE k=3 since array for k=1 is empty
        %begin approximating based on previous column
for k=3%:1:order+1 %order or column modifier for third integral approximation
    %begin at third row(boole's rule), k=3, and end at order;
    
    %max index is final workspace value of subdivisions+1
    for j=k:1:subdivisions+1 %iterations or row modifier for third integral approximator
        %begin this loop at integration level, j=k=3, up to subdivisions
 
            I(j,k) = (4^(k-1) * I(j, k-1) - I(j-1, k-1) ) / ( 4^(k-1) - 1 ) ; %3rd integral
    end
 
end
 
figure(1)
subplot(2,2,1)
c1=2;
for j=1:1:subdivisions
errorh4(j,1)=abs(0.746824132812452-I(j,c1))/I(j,c1);
end
 
loglog(errorh4)
title('true relative error h(O4)')
 
subplot(2,2,2)
c2=3;
for j=1:1:subdivisions
errorh6(j,1)=abs(0.746824132812452-I(j,c2))/I(j,c2);
end
 
loglog(errorh6)
title('true relative error h(O6)')
 
subplot(2,2,3)
c1=2;
for j=1:1:subdivisions
a(j,1)=fix(errorh4(j,1)*1000000000000000)/1000000000000000;
end
 
loglog(a)
title('true relative error h(O4) w/ truncation at 16 digits')
 
subplot(2,2,4)
c2=3;
for j=1:1:subdivisions
b(j,1)=fix(errorh6(j,1)*1000000000000000)/1000000000000000;
end
 
loglog(b)
title('true relative error h(O6) w/ truncation at 16 digits')
